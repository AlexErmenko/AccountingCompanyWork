// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace UI.Models
{
    public partial class SoftwareFirmContext : DbContext
    {
        public SoftwareFirmContext()
        {
        }


        public virtual DbSet<DataBase> Databases { get; set; }
        public virtual DbSet<OperatingSystem> OperatingSystems { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Software> Softwares { get; set; }
        public virtual DbSet<SoftwareDataBase> SoftwareDatabases { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseLazyLoadingProxies();
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=MSI\\MSSQLSERVER2017;Initial Catalog=KatyaKP;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DataBase>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("DataBase_pk")
                    .IsClustered(false);

                entity.ToTable("DataBase");

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.IdServerNavigation)
                    .WithMany(p => p.Databases)
                    .HasForeignKey(d => d.IdServer)
                    .HasConstraintName("DataBase_Server_Id_fk");
            });

            modelBuilder.Entity<OperatingSystem>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("OC_pk")
                    .IsClustered(false);

                entity.ToTable("OperatingSystem");

                entity.Property(e => e.Capacity)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Server>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Server_pk")
                    .IsClustered(false);

                entity.ToTable("Server");

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<Software>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("Software_pk")
                    .IsClustered(false);

                entity.ToTable("Software");

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.IdOperatingSystemNavigation)
                    .WithMany(p => p.Softwares)
                    .HasForeignKey(d => d.IdOperatingSystem)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("Software_OC_Id_fk");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Softwares)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("Software_User_Id_fk");
            });

            modelBuilder.Entity<SoftwareDataBase>(entity =>
            {
                entity.HasKey(e => new { e.IdSoftware, e.IdDataBase })
                    .HasName("SoftwareDataBase_pk")
                    .IsClustered(false);

                entity.ToTable("SoftwareDataBase");

                entity.HasOne(d => d.IdDataBaseNavigation)
                    .WithMany(p => p.SoftwareDatabases)
                    .HasForeignKey(d => d.IdDataBase)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SoftwareDataBase_DataBase_Id_fk");

                entity.HasOne(d => d.IdSoftwareNavigation)
                    .WithMany(p => p.SoftwareDatabases)
                    .HasForeignKey(d => d.IdSoftware)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("SoftwareDataBase_Software_Id_fk");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.Id)
                    .HasName("User_pk")
                    .IsClustered(false);

                entity.ToTable("User");

                entity.Property(e => e.FirstName).IsRequired();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}